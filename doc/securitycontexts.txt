security context documentation:

introduction
JavaGAT offers an API for accessing the Grid and uses different middleware to realize this. Since different middleware uses different security mechanisms JavaGAT cannot hide the security. Therefore security contexts exist. Using a security context, the necessary security data can be passed through the JavaGAT to the adaptor of middleware. A security context can be added to a GATContext.

example:
GATContext context = new GATContext();
SecurityContext securityContext = new SomeSpecificSecurityContext(parameter1, parameterN);
context.addSecurityContext(securityContext);

existing security contexts:
1. CredentialSecurityContext
2. PasswordSecurityContext
3. CertificateSecurityContext
4. MyProxyServerCredentialSecurityContext

adaptor-security context bindings:
SSH:     PasswordSecurityContext(String sshUsername, String sshPassword)
SFTP:    PasswordSecurityContext(String sftpUsername, String sftpPassword)
FTP:     PasswordSecurityContext(String ftpUsername, String ftpPassword)
Globus:  CertificateSecurityContext(URI userkeyFile, URI usercertFile, String grid-proxy-init-passphrase)
         CredentialSecurityContext(byte[] proxyFileToByteArray)
         CredentialSecurityContext(String proxyFileToString)
         MyProxyServerCredentialSecurityContext(String myProxyHost, int myProxyPort, String myProxyUsername, String myProxyPassword)

