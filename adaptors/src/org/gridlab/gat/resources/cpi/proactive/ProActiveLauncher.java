package org.gridlab.gat.resources.cpi.proactive;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.objectweb.proactive.Body;
import org.objectweb.proactive.InitActive;
import org.objectweb.proactive.RunActive;
import org.objectweb.proactive.Service;
import org.objectweb.proactive.core.node.Node;
import org.objectweb.proactive.core.process.JVMProcessImpl;
import org.objectweb.proactive.core.process.AbstractExternalProcess.StandardOutputMessageLogger;
import org.objectweb.proactive.core.util.wrapper.IntWrapper;
import org.objectweb.proactive.core.util.wrapper.StringWrapper;

// Must be public, otherwise the stub generated by ProActive cannot
// access it.
public class ProActiveLauncher implements Serializable, InitActive, RunActive {
    HashMap statuses = new HashMap();
    HashMap watchers = new HashMap();
    HashMap finishedJobs = new HashMap();

    public static final int RUNNING = 0;
    public static final int FINISHED = 1;
    public static final int ERROR = 2;

    static final Logger logger
            = ibis.util.GetLogger.getLogger(ProActiveLauncher.class);

    String nodeID = "";

    Body body = null;

    int jobCounter = 0;

    class Watcher extends Thread {
        JVMProcessImpl jvm;
        String jobID;

        public Watcher(JVMProcessImpl jvm, String jobID) {
            this.jvm = jvm;
            this.jobID = jobID;
            setDaemon(true);
            synchronized(watchers) {
                watchers.put(jobID, this);
            }
        }

        public void run() {
            while (! jvm.isFinished()) {
                try {
                    Thread.sleep(1000);
                } catch(Exception e) {
                    // ignored
                }
            }
            setStatus(jobID, new Integer(FINISHED));
            synchronized(watchers) {
                watchers.remove(jobID);
                finishedJobs.put(jobID, new Integer(jvm.exitValue()));
            }
        }
    }

    public ProActiveLauncher() {
    }

    public void initActivity(Body body) {
        nodeID = body.getID().toString();
    }

    public void runActivity(Body body) {
        Service service = new Service(body);

        this.body = body;

        while (body.isAlive() && body.isActive()) {
            service.blockingServeOldest();
            logger.info("Served request");
        }
        logger.info("runActivity terminates");
    }

    public void die() {
        logger.info("Got die");
        try {
            body.terminate();
        } catch(Exception e) {
            logger.warn("Got exception during terminate:", e);
        }
    }

    private void setupParams(HashMap JVMParams) {
        Entry[] entries
            = (Entry[]) JVMParams.entrySet().toArray(new Entry[0]);

        for (int i = 0; i < entries.length; i++)
            System.setProperty((String) entries[i].getKey(),
                    (String) entries[i].getValue());
    }

    public StringWrapper launch(String classname, String jvmArgs,
            String progArgs, String classpath, Node node) {
        String jobID = nodeID + "_" + jobCounter++;

        JVMProcessImpl jvm = new JVMProcessImpl(
                new StandardOutputMessageLogger(), new StandardOutputMessageLogger());

        jvm.setClassname(classname);

        if (classpath != null) {
            jvm.setClasspath(classpath);
        }

        jvm.setParameters(progArgs);

        jvm.setJvmOptions(jvmArgs);

        try {
            node.getProActiveRuntime().createVM(jvm);
            //jvm.startProcess();
            setStatus(jobID, new Integer(RUNNING));
            new Watcher(jvm, jobID).start();
        } catch (Exception e) {
            logger.warn("Got exception during createVM:",  e);
            setStatus(jobID, new Integer(ERROR));
        }
        return new StringWrapper(jobID);
    }

    private synchronized void setStatus(String id, Integer status) {
        statuses.put(id, status);
    }

    public synchronized IntWrapper getStatus(String id) {
        return new IntWrapper(((Integer) statuses.get(id)).intValue());
    }

    public IntWrapper getExitStatus(String id) {
        synchronized(watchers) {
            Integer eval = (Integer) finishedJobs.get(id);
            if (eval != null) {
                finishedJobs.remove(id);
                return new IntWrapper(eval.intValue());
            }
        }
        return new IntWrapper(-1);
    }

    public void stopJob(String id) {
        Watcher watcher;
        synchronized(watchers) {
            watcher = (Watcher) watchers.get(id);
        }
        if (watcher != null) {
            watcher.jvm.stopProcess();
            try {
                watcher.jvm.waitFor();
            } catch(Exception e) {
                // ignored
            }
        }
    }

    public IntWrapper ping() {
        return new IntWrapper(0);
    }
}
