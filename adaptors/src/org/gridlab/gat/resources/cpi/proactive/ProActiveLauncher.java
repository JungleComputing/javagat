package org.gridlab.gat.resources.cpi.proactive;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.objectweb.proactive.Body;
import org.objectweb.proactive.InitActive;
import org.objectweb.proactive.RunActive;
import org.objectweb.proactive.Service;
import org.objectweb.proactive.core.node.Node;
import org.objectweb.proactive.core.process.JVMProcessImpl;
import org.objectweb.proactive.core.process.AbstractExternalProcess.StandardOutputMessageLogger;
import org.objectweb.proactive.core.util.wrapper.IntWrapper;
import org.objectweb.proactive.core.util.wrapper.StringWrapper;

// Must be public, otherwise the stub generated by ProActive cannot
// access it.
public class ProActiveLauncher implements Serializable, InitActive, RunActive {
    HashMap jobs = new HashMap();

    static final Logger logger
            = ibis.util.GetLogger.getLogger(ProActiveLauncher.class);

    String nodeID = "";

    Body body = null;

    int jobCounter = 0;

    final ProActiveJobWatcher w;

    class Watcher extends Thread {
        JVMProcessImpl jvm;
        String jobID;

        public Watcher(JVMProcessImpl jvm, String jobID) {
            this.jvm = jvm;
            this.jobID = jobID;
            setDaemon(true);
        }

        public void run() {
            while (! jvm.isFinished()) {
                try {
                    jvm.waitFor();
                } catch(Exception e) {
                    // ignored
                }
            }

            w.finishedJob(jobID, jvm.exitValue());
        }
    }

    public ProActiveLauncher() {
        w = null;
    }

    public ProActiveLauncher(ProActiveJobWatcher w) {
        this.w = w;
    }

    public void initActivity(Body body) {
        nodeID = body.getID().toString();
    }

    public void runActivity(Body body) {
        Service service = new Service(body);

        this.body = body;

        while (body.isAlive() && body.isActive()) {
            service.blockingServeOldest();
            logger.info("Served request");
        }
        logger.info("runActivity terminates");
    }

    public void die() {
        logger.info("Got die");
        try {
            body.terminate();
        } catch(Exception e) {
            logger.warn("Got exception during terminate:", e);
        }
    }

    private void setupParams(HashMap JVMParams) {
        Entry[] entries
            = (Entry[]) JVMParams.entrySet().toArray(new Entry[0]);

        for (int i = 0; i < entries.length; i++)
            System.setProperty((String) entries[i].getKey(),
                    (String) entries[i].getValue());
    }

    public StringWrapper launch(String classname, String jvmArgs,
            String progArgs, String classpath, Node node, String jobID) {

        JVMProcessImpl jvm = new JVMProcessImpl(
                new StandardOutputMessageLogger(), new StandardOutputMessageLogger());

        jvm.setClassname(classname);

        jvm.setLog4jFile(null);
        jvm.setPolicyFile(null);

        if (classpath != null) {
            jvm.setClasspath(classpath);
        }

        jvm.setParameters(progArgs);

        jvm.setJvmOptions(jvmArgs);

        try {
            node.getProActiveRuntime().createVM(jvm);
            //jvm.startProcess();
            synchronized(jobs) {
                jobs.put(jobID, jvm);
            }

            w.startedJob(jobID);
            new Watcher(jvm, jobID).start();
        } catch (Exception e) {
            logger.warn("Got exception during createVM:",  e);
            return new StringWrapper(null);
        }
        return new StringWrapper(jobID);
    }

    public void stopJob(String id) {
        JVMProcessImpl jvm;
        synchronized(jobs) {
            jvm = (JVMProcessImpl) jobs.get(id);
        }
        if (jvm != null) {
            jvm.stopProcess();
        }
    }

    public IntWrapper ping() {
        return new IntWrapper(0);
    }
}
