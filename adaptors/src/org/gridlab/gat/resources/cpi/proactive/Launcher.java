package org.gridlab.gat.resources.cpi.proactive;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.log4j.Logger;
import org.objectweb.proactive.Body;
import org.objectweb.proactive.RunActive;
import org.objectweb.proactive.Service;
import org.objectweb.proactive.core.node.Node;
import org.objectweb.proactive.core.process.JVMProcessImpl;
import org.objectweb.proactive.core.process.MessageSink;
import org.objectweb.proactive.core.util.RemoteProcessMessageLogger;
import org.objectweb.proactive.core.util.wrapper.StringWrapper;

/**
 * This class takes care of launching JVMs to execute the application.
 * Each node runs an instance of this class.
 * It must be public, otherwise the stub generated by ProActive cannot
 * access it.
 */
public class Launcher implements Serializable, RunActive {
    /** Maps job id's to jvms. */
    private HashMap jobs = new HashMap();

    /** For debugging and error messages. */
    private final Logger logger
            = ibis.util.GetLogger.getLogger(Launcher.class);

    /** For making callbacks to maintain job administration. */
    final JobWatcher jobWatcher;

    /** Node on which this launcher is running. */
    final Node node;

    /** Collects output and passes it on to the jobWatcher. */
    class OutputLogger implements RemoteProcessMessageLogger {
        String jobID;
        OutputLogger(String jobID) {
            this.jobID = jobID;
        }
        public void log(String message) {
            jobWatcher.addOutput(jobID, message);
        }

        public void log(String message, Throwable e) {
            jobWatcher.addOutput(jobID, message + e);
        }

        public void log(Throwable e) {
            jobWatcher.addOutput(jobID, "" + e);
        }
    }

    /** Collects error output and passes it on to the jobWatcher. */
    class ErrorLogger implements RemoteProcessMessageLogger {
        String jobID;
        ErrorLogger(String jobID) {
            this.jobID = jobID;
        }
        public void log(String message) {
            jobWatcher.addError(jobID, message);
        }

        public void log(String message, Throwable e) {
            jobWatcher.addError(jobID, message + e);
        }

        public void log(Throwable e) {
            jobWatcher.addError(jobID, "" + e);
        }
    }

    /** Obtains input from the jobWatcher. */
    class InputSink implements MessageSink {
        private ArrayList messages = new ArrayList();
        private boolean done = false;

        public synchronized String getMessage() {
            String s = null;
            while (messages.size() == 0 && ! done) {
                try {
                    wait();
                } catch(Exception e) {
                    // ignored
                }
            }
            if (messages.size() > 0) {
                s = (String) messages.remove(0);
            }
            logger.info("Delivering message " + s);
            return s;
        }

        public synchronized boolean hasMessage() {
            return messages.size() != 0;
        }

        public synchronized boolean isActive() {
            return ! done;
        }

        public synchronized void setMessage(String m) {
            if (m == null) {
                done = true;
            } else {
                messages.add(m);
            }
            notifyAll();
        }
    }

    /**
     * Every time an application JVM is started, an accompanying thread
     * is started to keep track of its status.
     */
    class Watcher extends Thread {
        /** The JVM. */
        JVMProcessImpl jvm;

        /** The identification of the job. */
        String jobID;

        /**
         * Constructor, with specified initial values for the fields.
         * @param jvm the JVM.
         * @param jobID the job identification.
         */
        public Watcher(JVMProcessImpl jvm, String jobID) {
            this.jvm = jvm;
            this.jobID = jobID;
        }

        /**
         * Waits until the JVM is finished, and notifies the watcher.
         */
        public void run() {
            while (! jvm.isFinished()) {
                try {
                    jvm.waitFor();
                } catch(Exception e) {
                    // ignored
                }
            }
            int eval = 0;
            try {
                eval = jvm.exitValue();
            } catch(Exception e) {
                // Is sometimes thrown, even after waitfor.
                // We ignore it, and lose the exit status.
            }
            jobWatcher.finishedJob(jobID, eval);
        }
    }

    /**
     * Public noargs constructor, required by ProActive.
     */
    public Launcher() {
        jobWatcher = null;
        node = null;
    }

    /**
     * Constructor with specified watcher on the specified node.
     * @param jobWatcher the watcher to notify.
     */
    public Launcher(JobWatcher jobWatcher, Node node) {
        this.jobWatcher = jobWatcher;
        this.node = node;
    }

    /**
     * ProActive activity handler.
     * @param body the active body.
     */
    public void runActivity(Body body) {
        Service service = new Service(body);

        while (body.isAlive() && body.isActive()) {
            service.blockingServeOldest();
            logger.info("Served request");
        }
        logger.info("runActivity terminates");
    }

    /**
     * Launches a new JVM for the application specified in the parameters.
     * It returns a StringWrapper, to allow for asynchronous launch.
     * For that to work, the return class type may not be final.
     * @param classname the name of the class to run.
     * @param jvmArgs JVM parameters.
     * @param progArgs application arguments.
     * @param classpath the classpath.
     * @param jobID identification for this job.
     * @return a string wrapper containing the job id or <code>null</code>
     * in case of failure.
     */
    public StringWrapper launch(String classname, String jvmArgs,
            String progArgs, String classpath, String jobID) {

        logger.info("Serving launch");
        // Create the JVM process and set its parameters.
        JVMProcessImpl jvm = new JVMProcessImpl(
                new OutputLogger(jobID),
                new ErrorLogger(jobID));
        jvm.setOutputMessageSink(new InputSink());

        jvm.setClassname(classname);

        jvm.setLog4jFile(null);
        jvm.setPolicyFile(null);

        if (classpath != null) {
            jvm.setClasspath(classpath);
        }

        jvm.setParameters(progArgs);

        jvm.setJvmOptions(jvmArgs);

        // Try and run it, spawn watcher thread if this succeeds.
        try {
            Watcher w = new Watcher(jvm, jobID);
            w.setDaemon(true);
            synchronized(jobs) {
                jobs.put(jobID, w);
            }
            node.getProActiveRuntime().createVM(jvm);
            //jvm.startProcess();
            w.start();

            jobWatcher.startedJob(jobID);
        } catch (Exception e) {
            logger.warn("Got exception during createVM:",  e);
            return new StringWrapper(null);
        }
        return new StringWrapper(jobID);
    }

    /**
     * Stops the specified job if present.
     * @param id the job identification.
     */
    public void stopJob(String id) {
        Watcher w;
        logger.info("Serving stopJob");
        synchronized(jobs) {
            w = (Watcher) jobs.get(id);
        }
        if (w != null) {
            w.jvm.stopProcess();
        }
    }

    /**
     * Provides a job with input.
     * @param id the job identification.
     * @param input the input.
     */
    public void provideInput(String id, String input) {
        Watcher w;
        logger.info("Serving provideInput to " + id + ": " + input);
        synchronized(jobs) {
            w = (Watcher) jobs.get(id);
        }
        if (w != null) {
            w.jvm.getOutputMessageSink().setMessage(input);
        }
    }

    /**
     * Test method. Returns an int, so is synchronous.
     * @return 0.
     */
    public int ping() {
        return 0;
    }
}
