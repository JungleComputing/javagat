Q: How do the security contexts work?

A: In JavaGAT, you can deal with security contexts as folows:

GATContext context = new GATContext();

// create a security context with a password
SecurityContext pwd = 
    new PasswordSecurityContext(username, password);

// restrict access to hostname1 and hostname2 machines,
// and only the ftp and ssh adaptors are allowed to use
// this credential
pwd.addNote("hosts", "hostname1:port1,hostname2:port2");
pwd.addNote("adaptors", "ftp,ssh");

// load a certificate
SecurityContext cert = 
    new CertificateSecurityContext(keyfile, username, passphrase);

// add them to the GAT context
context.addSecurityContext(pwd);
context.addSecurityContext(cert);


Note that all of this is optional. If you just do a grid-proxy-init,
and leave everything in its default location, GAT will automatically
work. In that case you don't have to create any security contexts...


Q: How do certificates work in JavaGAT?

A:
GAT itself does not require a certificate, but some adaptors require
them. So it depends on what you do whether you need a certificate or
not. If you use GAT with the SSH or FTP adaptors, you won't need a
certificate. If you need the Globus adaptors, you also need a Globus
certificate.

It is certainly possible to use the Globus adaptors in JavaGAT on a
machine that does not have a GTK installed. You do still need a proxy
certificate in that case. You could copy it by hand, for instance, or
you could use a myproxy server. Or, if there is a shared filesystem,
you can load it directly.

The files in engine/src/org/gridlab/gat/security contain classes that
allow you to access certificates in the JavaGAT.

So you can do things like this to tell GAT where your certificate is:

GatContext context = new GATContext();
CertificateSecurityContext c = new CertificateSecurityContext(keyfile, 
    username, passphrase);
context.addSecurityContext(c);

Or, if you have a myproxy server:

GatContext context = new GATContext();
MyProxyServerCredentialSecurityContext c = new 
    MyProxyServerCredentialSecurityContext(host, port, username, 
    password);
context.addSecurityContext(c);

If your certificate is in the default location, and if you did a
grid-proxy-init, you don't have to do anything, JavaGAT will then
automatically find your proxy certificate.


Q: what about Globus Tookit 4?
A:
For Java, we don't have GT4 adaptors yet, only adaptors
for GT2 and GT3. However, I received reports that our adaptors also
work with GT4 file transfer and job submission, as it is backwards
compatible, but I haven't tried this myself. But without a real GT4
adaptor, we cannot use GT4-specific features.



Q: What is the difference between DataBrowsingFileAdaptor and DataMovementFileAdaptor?

A:
They are both File adaptors. Because the Java GAT has
dynamic binding, an adaptor does not have to implement the full
functionality of the GAT object API. So basically, DataMovement
interfaces to the gridlab data service, while DataBrowsing interfaces
to the gridlab data browsing service. Currently, WP-8 implemented
those as two different services (they will be merged at some point I
heard).

So together, the two adaptors implement remote files, but they can be
used seperately. In the latter case, some methods will not work,
others will. So if you have only DataMovement, File.copy will work,
but File.getSize() throws an exception...


Q: Why are there seperate FileInputStreamAdaptors and FileOutputStreamAdaptors?

A: 
OK, these are indeed seperate objects in the Java GAT. We chose to do
that, because it is like that in normal Java, and because this way all
Java's IO code can be reused. The streams extend java.io.InputStream
and OutputStream. So this way you can use Java serialization, RMI,
etc. with the GAT.


Q: What of DefaultRandomAccessFileAdaptor?

A:
OK, that is something that is completely missing in the GAT
specification. It is sort of scheduled for the GAT API 2.0 I think,
but the Java GAT already has it... Again, it is compatible with the
java.io.* classes...  In the current GAT API spec, you can seek in
streams. The idea is to seperate the streaming and random access
access to files.

So, to summarize, the Java GAT File API is slightly different that
what the API spec prescribes. Two reasons for that:

1. Fits better in Java (compatible with java.io.*)
2. The next GAT spec will probably look similar to this anyway.


Q: Why doesn't my application terminate?
A: Did you call GAT.end() ?
   if you didn't -> call it please :-)
   if you did -> press CTRL - \ to let the JVM dump all stacks.
   If you think that the cause is GAT, please send me a bug report containing the
   stack traces.


Q: If I try to copy: file:////test.txt -> ssh://mleyton@machine/test.txt
   When GAT looks for adaptors, no one fits. On the other hand this works:
   any:///test.txt -> ssh://mleyton@machine/test.txt
   Why does this happen?
A: For the copy this means that the copy method is executed by the
   adaptor of the SRC file object, since you call SRC.copy(DEST).  So
   this adaptor that has to do the copying is an adaptor that speaks the
   protocol of the SRC file.  Thus, something like file://XXX ->
   ssh://YYY does not work, because the adator that implements the "file"
   protocol does not speak ssh.  any://XXX -> SCHEME://YYY should work,
   regardless of SCHEME.

Q: Shouldn't the late binding jump in in the above case and select
   another adaptor on the copy operation?

A: Not if the file object explicitely defines a scheme in the URI.  So
   if you create a file with the URI
   gsiftp://fs0.das2.cs.vu.nl//home/rob/foo Than the GAT engine cannot
   use a local file adaptor or the ssh adaptor.  It does not make sense,
   the user said it should be gsiftp...  If you want this, you should
   use the "any" scheme: any://fs0.das2.cs.vu.nl//home/rob/foo


Q: I get an error saying "GAT: No adaptors could be loaded" when I run without 
   the run_gat_app script

A: You can point the place where the adaptors are located out to the
engine with the -Dgat.adaptor.path=XXX:YYY:ZZZ commandline option,
where XXX, YYY and ZZZ are directories that contain .jar files. You
don't have to mention the individual jars, just put the directory
where they live in the adaptor path. The "external" jars directory
from the "external" directory of the JavaGATAdaptors should also be in
the adaptor path...  There is no need to put the adaptor jars in the
classpath. 


Q: In the java GAT engine is there a location or file where the order 
   in which the adaptors are loaded can be specified?

A: Yes, there is a way to do that, you can specify a AdaptorOrderPolicy 
   class that defines some ordering. There is a default ordering specified 
   in org.gridlab.gat.engine.DefaultAdaptorOrderPolicy. You can subclass 
   the AdaptorOrderPolicy class or the DefaultAdaptorOrderPolicy class.
   Next, you can tell the GAT to use your ordering, by setting the Java 
   system property "adaptor.order.policy" to your class.


Q: Sometimes the SSH or SFTP adaptor seems to hang at startup, while reading random numbers
A: Right, I understand this is a bug in some combinations of linux and Java.
   If you add the option "-Djava.security.egd=file:/dev/urandom" to your Java command, 
   it should be fixed. 
   You can also add this option to the run_gat_app script if you want:
   bin/run_gat_app -Djava.security.egd=file:/dev/urandom \
     file.RemoteCopyPerformanceTest any://fs0.das2.cs.vu.nl/testfile2m any:///testfile


Have Fun,

Rob
